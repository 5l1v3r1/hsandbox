#!/usr/bin/python
import subprocess
import tempfile
import signal
import shutil
import random
import sys
import os
import re

import pyinotify


HSANDBOX_DIR = os.path.expanduser("~/.hsandbox")

SCREENRC = """
sessionname hsandbox
screen -t Sandbox %(hsandbox)s --editor
split
focus
screen -t Output %(hsandbox)s --runner
focus
"""

VIM_ARGS = "+$HSANDBOX_LINE +'normal $'"

EDITOR_ARGS = {
    "vi": VIM_ARGS,
    "vim": VIM_ARGS,
    "gvim": VIM_ARGS,
    }


class Error(Exception):
    """Any local error."""


class Hacking(object):

    filename = "sandbox.txt"
    template = "<cursor>"
    command = ""
    use_old_sandbox = False

    def write_sandbox(self):
        template_paths = [os.path.join(HSANDBOX_DIR,
                                       self.filename + ".template")]
        if self.use_old_sandbox:
            template_paths.insert(0, os.path.join(HSANDBOX_DIR, self.filename))
        for template_path in template_paths:
            template_path = os.path.expanduser(template_path)
            if os.path.isfile(template_path):
                with open(template_path) as file:
                    template = file.read()
                break
        else:
            template = self.template
        sandbox_content, cursor_line = parse_cursor(template)
        # Write to a temporary file and then rename, to prevent
        # generating a MODIFY event and attempting to run it.
        with open(self.filename + ".tmp", "w") as file:
            file.write(sandbox_content)
        os.rename(self.filename + ".tmp", self.filename)
        return cursor_line

    def get_command(self, version):
        return self.command.replace("<version>", version)

    def support_version(self):
        return self.get_command("V") != self.get_command("")


class GoHacking(Hacking):

    filename = "sandbox.go"

    template = ("package main\n\n"
                "import (\n)\n\n"
                "func main() {\n<cursor>\n}\n")

    def get_command(self, version):
        arch = os.uname()[-1]
        if arch == "x86_64":
            number = 6
        elif arch.endswith("86"):
            number = 8
        elif arch.startswith("arm"):
            number = 5
        else:
            return 'echo "Error: hsandbox can\'t Go on architecture %s"' % arch
        return ("%dg -o sandbox.l sandbox.go && "
                "%dl -o sandbox sandbox.l && "
                "./sandbox") % (number, number)


class ErlangHacking(Hacking):

    filename = "sandbox.erl"

    template = ("-module(sandbox).\n"
                "-export([start/0]).\n\n"
                "start() ->\n"
                "<cursor>\n")

    def get_command(self, version):
        return ("erlc sandbox.erl && "
                "erl -noshell -s sandbox start -s init stop")


class CHacking(Hacking):

    filename = "sandbox.c"

    template = ("#include <stdlib.h>\n"
                "#include <stdio.h>\n\n"
                "int main(int argc, char *argv[])\n{\n"
                "<cursor>\n"
                "\treturn 0;\n"
                "}\n\n"
                "/* Environment variables HSANDBOX_{CFLAGS,LDFLAGS} "
                "may be useful. */\n")

    def get_command(self, version):
        if version:
            standard = "-std=c" + version
        else:
            standard = "-ansi"
        return ("gcc %s -Wall -pedantic sandbox.c -o sandbox"
                " $HSANDBOX_CFLAGS $HSANDBOX_LDFLAGS && "
                "./sandbox") % standard


class CCHacking(Hacking):

    filename = "sandbox.cc"

    template = ("#include <iostream>\n\n"
                "using namespace std;\n\n"
                "int main(int argc, char *argv[])\n{\n"
                "<cursor>\n"
                "\treturn 0;\n"
                "}\n\n"
                "// Environment variables HSANDBOX_{CXXFLAGS,LDFLAGS} "
                "may be useful.\n")

    def get_command(self, version):
        if version:
            standard = "-std=c++" + version
        else:
            standard = "-ansi"
        return ("g++ %s -Wall -pedantic sandbox.cc -o sandbox"
                " $HSANDBOX_CXXFLAGS $HSANDBOX_LDFLAGS && "
                "./sandbox") % standard


class JavaHacking(Hacking):

    filename = "Sandbox.java"

    template = ("\npublic class Sandbox {\n\n"
                "\tpublic static void main(String[] args) {\n"
                "\t\t<cursor>\n"
                "\t}\n\n"
                "}\n")

    command = "javac Sandbox.java && java Sandbox"


class HaskellHacking(Hacking):
    filename = "sandbox.hs"
    template = "\nmain =\n\t<cursor>\n"
    command = "runhaskell sandbox.hs"


class PythonHacking(Hacking):
    filename = "sandbox.py"
    command = "python<version> sandbox.py"


class NodeHacking(Hacking):
    filename = "sandbox.js"
    command = "node<version> sandbox.js"


class RubyHacking(Hacking):
    filename = "sandbox.rb"
    command = "ruby<version> sandbox.rb"

class LuaHacking(Hacking):
    filename = "sandbox.lua"
    command = "lua<version> sandbox.lua"

class PerlHacking(Hacking):
    filename = "sandbox.pl"
    command = "perl<version> sandbox.pl"


LANGUAGES = {
    "c": CHacking,
    "cc": CCHacking,
    "cpp": CCHacking,
    "go": GoHacking,
    "lua": LuaHacking,
    "pl": PerlHacking,
    "py": PythonHacking,
    "js": NodeHacking,
    "rb": RubyHacking,
    "erl": ErlangHacking,
    "hs": HaskellHacking,
    "java": JavaHacking,
    }


def parse_cursor(template):
    if "<cursor>" in template:
        before, after = template.split("<cursor>")
    else:
        before, after = "", template
    line = before.count("\n") + 1
    content = before + after
    return content, line


class EventHandler(pyinotify.ProcessEvent):

    def __init__(self, hacking, version):
        self.hacking = hacking
        self.version = version
        self.process = None

    def process_IN_MODIFY(self, event):
        if event.pathname == os.path.join(os.getcwd(), self.hacking.filename):
            if self.process:
                os.killpg(self.process.pid, signal.SIGKILL)
            def preexec_fn():
                os.setpgid(0, 0)
            os.system("clear")
            command = self.hacking.get_command(self.version)
            self.process = subprocess.Popen(command, shell=True,
                                            preexec_fn=preexec_fn)

    def process_IN_DELETE(self, event):
        if event.pathname == os.path.join(os.getcwd(),
                                          ".hsandbox-editor-running"):
            sys.exit(0)


def screen(hacking, argv):
    argv[0] = os.path.abspath(argv[0])
    workdir = tempfile.mkdtemp(prefix="hsandbox-")
    try:
        os.chdir(workdir)
        screenrc = os.path.join(workdir, ".hsandbox-screenrc")
        with open(screenrc, "w") as file:
            file.write(SCREENRC % {"hsandbox": " ".join(argv)})
        subprocess.call(["screen", "-c", screenrc])
    finally:
        shutil.rmtree(workdir)

    message = random.choice([
        "Great stuff you did. Hope you enjoyed it.",
        "Wow, what a bunch of hacks!",
        "I'd even show that to my mom, if I had one.",
        "I wouldn't dare to use the stuff you wrote.",
        "I've seen better hacks.",
        "Yeah, it was pretty cool, actually.",
        ])

    print message


def editor(hacking):
    cursor_line = hacking.write_sandbox()
    os.environ["HSANDBOX_LINE"] = str(cursor_line)
    cmd = os.environ.get("HSANDBOX_EDITOR")
    if not cmd:
        cmd = os.environ.get("EDITOR")
        if not cmd:
            cmd = "vi"
        cmd_args = EDITOR_ARGS.get(cmd.split()[0])
        if cmd_args:
            cmd += " " + cmd_args
    open(".hsandbox-editor-running", "w").close()
    os.system("%s %s" % (cmd, hacking.filename))
    shutil.copy(hacking.filename, os.path.join(HSANDBOX_DIR, hacking.filename))
    os.unlink(".hsandbox-editor-running")


def runner(hacking, version):
    mask = pyinotify.IN_MODIFY | pyinotify.IN_DELETE
    wm = pyinotify.WatchManager()
    handler = EventHandler(hacking, version)
    notifier = pyinotify.Notifier(wm, handler)
    wm.add_watch(".", mask)
    notifier.loop()
 

USAGE = """\
Usage: hsandbox <lang>[<version>] [options]

Available languages:

  c      - C
  cc/cpp - C++
  erl    - Erlang
  go     - Go
  hs     - Haskell (ghc)
  java   - Java
  js     - Javascript (Node)
  lua    - Lua
  pl     - Perl
  py     - Python
  rb     - Ruby

Versioning examples:

  hsandbox c99
  hsandbox py3.1
  hsandbox rb1.8

Options:

  -c  - Continue editing the last sandbox for the given language.

"""


def split_version(argument):
    m = re.match("([a-z]+)(.*)", argument)
    if not m or m.group(1) not in LANGUAGES:
        if argument.startswith("-"):
            sys.exit(USAGE)
        raise Error("Language %r not known" % argument)
    return m.groups()


def main(argv):
    try:
        os.mkdir(HSANDBOX_DIR)
    except OSError:
        pass

    if len(argv) > 1:
        language, version = split_version(argv[1])
        hacking = LANGUAGES[language]()
        if version and not hacking.support_version():
            raise Error("Language %s doesn't support versioning" % language)
    else:
        sys.exit(USAGE)

    mode = "screen"

    if len(argv) > 2:
        for option in argv[2:]:
            if option == "--editor":
                mode = "editor"
            elif option == "--runner":
                mode = "runner"
            elif option == "-c":
                hacking.use_old_sandbox = True
            else:
                sys.exit(USAGE)

    if mode == "screen":
        screen(hacking, argv)
    elif mode == "editor":
        editor(hacking)
    elif mode == "runner":
        runner(hacking, version)
    else:
        raise RuntimeError("WTF? (%s)" % mode)


if __name__ == "__main__":
    try:
        main(sys.argv)
    except KeyboardInterrupt:
        sys.exit("Interrupted")
    except Error, e:
        sys.exit("error: %s" % e)
